CREATE TYPE "user_status" AS ENUM (
	'pending',
	'active',
	'inactive',
	'suspended',
	'deleted'
);

CREATE TYPE "session_device" AS ENUM (
	'web_chrome',
	'web_firefox',
	'web_edge',
	'web_safari',
	'web_other',
	'mobile_android',
	'mobile_ios',
	'mobile_web',
	'desktop_app',
	'tablet',
	'bot',
	'unknown'
);
CREATE TABLE "users" (
	"id" UUID NOT NULL UNIQUE,
	"firebase_uuid" TEXT NOT NULL UNIQUE,
	"email" TEXT NOT NULL UNIQUE,
	"status" USER_STATUS NOT NULL,
	"created_at" TIMESTAMP NOT NULL,
	"updated_at" TIMESTAMP NOT NULL,
	PRIMARY KEY("id")
);

CREATE INDEX "idx_users_email"
ON "users" ("email");

CREATE INDEX "idx_users_firebase_uuid"
ON "users" ("firebase_uuid");

CREATE INDEX "idx_users_status"
ON "users" ("status");

CREATE TABLE "user_profiles" (
	"user_id" UUID NOT NULL,
	"first_name" TEXT,
	"last_name" TEXT,
	"display_name" TEXT,
	"avatar_url" TEXT,
	"created_at" TIMESTAMP NOT NULL,
	"updated_at" TIMESTAMP NOT NULL,
	PRIMARY KEY("user_id")
);


CREATE TABLE "roles" (
	-- admin, moderator, user, support
	"id" SERIAL NOT NULL UNIQUE,
	-- admin, moderator, user, support
	"role" TEXT NOT NULL UNIQUE,
	"description" TEXT,
	PRIMARY KEY("id")
);
COMMENT ON COLUMN roles.id IS 'admin, moderator, user, support';
COMMENT ON COLUMN roles.role IS 'admin, moderator, user, support';


CREATE TABLE "permissions" (
	"id" SERIAL NOT NULL UNIQUE,
	-- for example user:read or user:write
	"permission" TEXT NOT NULL UNIQUE,
	"description" TEXT,
	PRIMARY KEY("id")
);
COMMENT ON COLUMN permissions.permission IS 'for example user:read or user:write';

CREATE INDEX "idx_permissions_permission"
ON "permissions" ("permission");

CREATE TABLE "user_roles" (
	"user_id" UUID NOT NULL,
	"role_id" SERIAL NOT NULL
);


CREATE TABLE "role_permissions" (
	"role_id" SERIAL NOT NULL,
	"permission_id" SERIAL NOT NULL
);


CREATE TABLE "user_sessions" (
	"token" UUID NOT NULL UNIQUE,
	"user_id" UUID NOT NULL,
	"device" SESSION_DEVICE NOT NULL,
	"ip" TEXT,
	"user_agent" TEXT,
	"created_at" TIMESTAMP NOT NULL,
	"expired_at" TIMESTAMP NOT NULL,
	PRIMARY KEY("token")
);

CREATE INDEX "idx_sessions_user_id"
ON "user_sessions" ("user_id");

CREATE INDEX "idx_sessions_expired_at"
ON "user_sessions" ("expired_at");

CREATE TABLE "user_settings" (
	"user_id" UUID NOT NULL UNIQUE,
	"email_verified" BOOLEAN NOT NULL DEFAULT false,
	"two_fa_enabled" BOOLEAN NOT NULL DEFAULT false,
	"language" TEXT NOT NULL,
	"display_currency" VARCHAR(5) NOT NULL DEFAULT 'USD',
	"dark_mode" BOOLEAN DEFAULT false,
	"timezone" TEXT,
	"withdrawal_confirmation_mode" BOOLEAN NOT NULL DEFAULT false,
	"created_at" TIMESTAMP NOT NULL,
	"updated_at" TIMESTAMP NOT NULL,
	PRIMARY KEY("user_id")
);


CREATE TABLE "login_audit_logs" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"user_id" UUID NOT NULL,
	-- Helpful for failed login attempts
	"email" TEXT,
	-- Whether login was successful
	"sucess" BOOLEAN NOT NULL DEFAULT false,
	"ip" TEXT,
	"user_agent" TEXT,
	"device" SESSION_DEVICE NOT NULL,
	"location" TEXT,
	-- "wrong password", "token expired", etc.
	"failure_reason" TEXT,
	"created_at" TIMESTAMP NOT NULL,
	PRIMARY KEY("id")
);
COMMENT ON COLUMN login_audit_logs.email IS 'Helpful for failed login attempts';
COMMENT ON COLUMN login_audit_logs.sucess IS 'Whether login was successful';
COMMENT ON COLUMN login_audit_logs.failure_reason IS '"wrong password", "token expired", etc.';

CREATE INDEX "idx_login_user_id"
ON "login_audit_logs" ("user_id");

CREATE INDEX "idx_login_email"
ON "login_audit_logs" ("email");

CREATE INDEX "idx_login_created_at"
ON "login_audit_logs" ("created_at");

ALTER TABLE "users"
ADD FOREIGN KEY("id") REFERENCES "user_profiles"("user_id")
ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE "roles"
ADD FOREIGN KEY("id") REFERENCES "user_roles"("role_id")
ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE "users"
ADD FOREIGN KEY("id") REFERENCES "user_roles"("user_id")
ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE "roles"
ADD FOREIGN KEY("id") REFERENCES "role_permissions"("role_id")
ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE "permissions"
ADD FOREIGN KEY("id") REFERENCES "role_permissions"("permission_id")
ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE "users"
ADD FOREIGN KEY("id") REFERENCES "user_sessions"("user_id")
ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE "users"
ADD FOREIGN KEY("id") REFERENCES "user_settings"("user_id")
ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE "users"
ADD FOREIGN KEY("id") REFERENCES "login_audit_logs"("user_id")
ON UPDATE NO ACTION ON DELETE SET NULL;